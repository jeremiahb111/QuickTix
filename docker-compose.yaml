version: '3.8'

services:
  auth:
    build: 
      context: ./auth
      dockerfile: Dockerfile.dev
    container_name: tm_auth
    environment:
      - AUTH_PORT=${AUTH_PORT}
      - NODE_ENV=${NODE_ENV}
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_DB_NAME=${AUTH_DB_NAME}
      - AUTH_SERVICE_NAME=${AUTH_SERVICE_NAME}
    develop:
      watch:
        - path: ./auth/package.json
          action: rebuild
        - path: ./package-lock.json
          action: rebuild
        - path: ./auth
          target: /app
          action: sync
    networks:
      - kafka-networks
  tickets:
    build: 
      context: ./tickets
      dockerfile: Dockerfile.dev
    container_name: tm_tickets
    environment:
      - TICKET_PORT=${TICKET_PORT}
      - NODE_ENV=${NODE_ENV}
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - TICKET_DB_NAME=${TICKET_DB_NAME}
      - TICKET_SERVICE_NAME=${TICKET_SERVICE_NAME}
      - TICKET_KAFKA_CONSUMER_TOPICS=${TICKET_KAFKA_CONSUMER_TOPICS}
      - TICKET_KAFKA_GROUP_ID=${TICKET_KAFKA_GROUP_ID}
      - TICKET_KAFKA_CLIENT_ID=${TICKET_KAFKA_CLIENT_ID}
    develop:
      watch:
        - path: ./tickets/package.json
          action: rebuild
        - path: ./package-lock.json
          action: rebuild
        - path: ./tickets
          target: /app
          action: sync
    depends_on:
      - kafka
    networks:
      - kafka-networks
  orders:
    build: 
      context: ./orders
      dockerfile: Dockerfile.dev
    container_name: tm_orders
    environment:
      - ORDER_PORT=${ORDER_PORT}
      - NODE_ENV=${NODE_ENV}
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - ORDER_DB_NAME=${ORDER_DB_NAME}
      - ORDER_SERVICE_NAME=${ORDER_SERVICE_NAME}
      - ORDER_EXPIRATION_WINDOW=${ORDER_EXPIRATION_WINDOW}
      - ORDER_KAFKA_CONSUMER_TOPICS=${ORDER_KAFKA_CONSUMER_TOPICS}
      - ORDER_KAFKA_GROUP_ID=${ORDER_KAFKA_GROUP_ID}
    develop:
      watch:
        - path: ./orders/package.json
          action: rebuild
        - path: ./package-lock.json
          action: rebuild
        - path: ./orders
          target: /app
          action: sync
    depends_on:
      - kafka
    networks:
      - kafka-networks

  expiration:
    build: 
      context: ./expiration
      dockerfile: Dockerfile.dev
    container_name: tm_expiration
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - EXPIRATION_KAFKA_CLIENT_ID=${EXPIRATION_KAFKA_CLIENT_ID}
      - EXPIRATION_KAFKA_GROUP_ID=${EXPIRATION_KAFKA_GROUP_ID}
      - EXPIRATION_KAFKA_CONSUMER_TOPICS=${EXPIRATION_KAFKA_CONSUMER_TOPICS}
    develop:
      watch:
        - path: ./expiration/package.json
          action: rebuild
        - path: ./package-lock.json
          action: rebuild
        - path: ./expiration
          target: /app
          action: sync
    depends_on:
      - kafka
    networks:
      - kafka-networks
  payments:
    build: 
      context: ./payments
      dockerfile: Dockerfile.dev
    container_name: tm_payments
    environment:
      - PAYMENTS_PORT=${PAYMENTS_PORT}
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
      - MONGODB_URI=${MONGODB_URI}
      - PAYMENTS_DB_NAME=${PAYMENTS_DB_NAME}
      - PAYMENTS_SERVICE_NAME=${PAYMENTS_SERVICE_NAME}
      - PAYMENTS_KAFKA_CLIENT_ID=${PAYMENTS_KAFKA_CLIENT_ID}
      - PAYMENTS_KAFKA_GROUP_ID=${PAYMENTS_KAFKA_GROUP_ID}
      - PAYMENTS_KAFKA_CONSUMER_TOPICS=${PAYMENTS_KAFKA_CONSUMER_TOPICS}
      - PAYMENTS_STRIPE_SECRET_KEY=${PAYMENTS_STRIPE_SECRET_KEY}
    develop:
      watch:
        - path: ./payments/package.json
          action: rebuild
        - path: ./package-lock.json
          action: rebuild
        - path: ./payments
          target: /app
          action: sync
    depends_on:
      - kafka
    networks:
      - kafka-networks
  
  redis:
    image: redis:8.2-rc1
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - kafka-networks
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://kafka:9094
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9094:9094"
    networks:
      - kafka-networks
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_READONLY=false
      - KAFKA_CLUSTERS_0_TOPIC_AUTO_CREATION=true
    depends_on:
      - kafka
    networks:
      - kafka-networks

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - auth
    networks:
      - kafka-networks

networks:
  kafka-networks:
    driver: bridge